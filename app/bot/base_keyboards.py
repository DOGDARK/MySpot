from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.bot.msgs_text import AVAILABLE_FILTERS, MsgsText
from app.services.db_service import DbService
from app.services.redis_service import RedisService


async def get_filters_keyboard(user_id: int, db_service: DbService, page: int = 0) -> InlineKeyboardMarkup:
    user_filters = await db_service.get_user_filters(user_id)
    buttons = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    items_per_page = 8
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page
    current_filters = AVAILABLE_FILTERS[start_idx:end_idx]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(current_filters), 2):
        row = []
        for filter_name in current_filters[i : i + 2]:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_name = filter_name[:20] + "..." if len(filter_name) > 23 else filter_name
            emoji = "‚úÖ " if filter_name in user_filters else ""
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å —Ñ–∏–ª—å—Ç—Ä–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            filter_index = AVAILABLE_FILTERS.index(filter_name)
            row.append(
                InlineKeyboardButton(
                    text=f"{emoji}{display_name}",
                    callback_data=f"filter_{filter_index}_{page}",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                )
            )
        buttons.append(row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    total_pages = (len(AVAILABLE_FILTERS) + items_per_page - 1) // items_per_page

    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"filters_page_{page - 1}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"filters_page_{page + 1}"))

    if nav_buttons:
        buttons.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞", callback_data="search_filter")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_filters")])
    buttons.append([InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="reset_all_filters")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìç –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç", callback_data="view_places_main"),
                InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_categories_main"),
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã", callback_data="show_filters_main"),
                InlineKeyboardButton(text="üó∫Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", callback_data="show_geolocation_main"),
            ],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help_main")],
        ]
    )


def get_reset_geolocation_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üó∫Ô∏è –£–∫–∞–∑–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                    callback_data="request_location",
                )
            ],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )


def get_categories_keyboard(user_id: int, redis_service: RedisService) -> InlineKeyboardMarkup:
    selected_categories = redis_service.get_user_data(user_id).get("selected_categories", [])
    buttons = []

    categories = [(category_type, category_type) for category_type in MsgsText.CATEGORIES_TYPES.value]

    for i in range(0, len(categories), 2):
        row = []
        for text, callback_data in categories[i : i + 2]:
            emoji = "‚úÖ " if callback_data in selected_categories else ""
            row.append(InlineKeyboardButton(text=f"{emoji}{text}", callback_data=callback_data))
        buttons.append(row)

    buttons.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_categories")])
    buttons.append([InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="reset_all_categories")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_wishes_keyboard(user_id: int, redis_service: RedisService) -> InlineKeyboardMarkup:
    selected_wishes = redis_service.get_user_data(user_id).get("selected_wishes", [])
    buttons = []

    wishes = [(wish_type, wish_type) for wish_type in MsgsText.WISHES_TYPES.value]

    for i in range(0, len(wishes), 2):
        row = []
        for text, callback_data in wishes[i : i + 2]:
            emoji = "‚úÖ " if callback_data in selected_wishes else ""
            row.append(InlineKeyboardButton(text=f"{emoji}{text}", callback_data=callback_data))
        buttons.append(row)

    buttons.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_wishes")])
    buttons.append([InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è", callback_data="reset_all_wishes")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_places_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="place_prev"),
                InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="place_next"),
            ],
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
                InlineKeyboardButton(text="‚ùå –° –º–µ—Å—Ç–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫", callback_data="place_bad"),
            ],
        ]
    )


def get_back_to_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    )


def get_update_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                    callback_data="reset_viewed",
                )
            ],
            [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_menu")],
            [
                InlineKeyboardButton(
                    text="üó∫Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                    callback_data="show_geolocation_main",
                )
            ],
        ]
    )


def get_change_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                    callback_data="show_categories_main",
                )
            ],
            [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="show_filters_main")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )


def get_back_to_filters_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="show_filters_main")]]
    )


def get_view_places_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìç –°–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–∞", callback_data="view_places_main")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
