from typing import Any

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from app.instances import db_service

AVAILABLE_FILTERS = [
    "–ö–∞—Ñ–µ",
    "–†–µ—Å—Ç–æ—Ä–∞–Ω",
    "–ö–æ—Ñ–µ–π–Ω—è",
    "–ë–∞—Ä",
    "–ü–∏—Ü—Ü–µ—Ä–∏—è",
    "–°—É—à–∏-–±–∞—Ä",
    "–°—Ç–æ–ª–æ–≤–∞—è",
    "–ü–∞–±",
    "–ß–∞–π —Å —Å–æ–±–æ–π",
    "–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã –∏ –æ—Ç–¥—ã—Ö–∞",
    "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
    "–¢–µ–∞—Ç—Ä",
    "–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–π –∑–∞–ª",
    "–ú—É–∑–µ–π",
    "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è",
    "–í—ã—Å—Ç–∞–≤–∫–∞",
    "–í—ã—Å—Ç–∞–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
    "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
    "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞",
    "–ü–ª–∞–Ω–µ—Ç–∞—Ä–∏–π",
    "–û–∫–µ–∞–Ω–∞—Ä–∏—É–º",
    "–ê–∫–≤–∞–ø–∞—Ä–∫",
    "–ë–∞—Å—Å–µ–π–Ω",
    "–ö–∞—Ç–æ–∫",
    "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å",
    "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–±",
    "–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä",
    "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —à–∫–æ–ª–∞",
    "–°–∫–∞–ª–æ–¥—Ä–æ–º",
    "–ë–æ—É–ª–∏–Ω–≥-–∫–ª—É–±",
    "–ö–≤–µ—Å—Ç—ã",
    "–ö–ª—É–± –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
    "–õ–∞–∑–µ—Ä—Ç–∞–≥",
    "–ü–µ–π–Ω—Ç–±–æ–ª",
    "–ö–∞—Ä—Ç–∏–Ω–≥",
    "–ë–∞—Ç—É—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
    "–í–µ—Ä—ë–≤–æ—á–Ω—ã–π –ø–∞—Ä–∫",
    "–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω",
    "–ü–∞—Ä–∫ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤",
    "–î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞",
    "–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞",
    "–ö–ª—É–± –¥–ª—è –¥–µ—Ç–µ–π –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤",
    "–¶–µ–Ω—Ç—Ä —Ä–∞–∑–≤–∏—Ç–∏—è —Ä–µ–±—ë–Ω–∫–∞",
    "–î–µ—Ç—Å–∫–∏–π –ª–∞–≥–µ—Ä—å –æ—Ç–¥—ã—Ö–∞",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤",
    "–ù–æ—á–Ω–æ–π –∫–ª—É–±",
    "–ö–∞—Ä–∞–æ–∫–µ-–∫–ª—É–±",
    "–ö–∞—Ä–∞–æ–∫–µ-–∫–∞–±–∏–Ω–∫–∞",
    "–ö–∞–ª—å—è–Ω-–±–∞—Ä",
    "–°—Ç—Ä–∏–ø—Ç–∏–∑-–∫–ª—É–±",
    "–ë–∞–Ω–∫–µ—Ç–Ω—ã–π –∑–∞–ª",
    "–ö–µ–π—Ç–µ—Ä–∏–Ω–≥",
    "–ê—Ä–µ–Ω–¥–∞ –ø–ª–æ—â–∞–¥–æ–∫ –¥–ª—è –∫—É–ª—å—Ç—É—Ä–Ω–æ-–º–∞—Å—Å–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π",
    "–ê–Ω—Ç–∏–∫–∞—Ñ–µ",
    "–í–æ–¥–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏",
    "–ü–ª—è–∂",
    "–°–∞—É–Ω–∞",
    "–ß–∞—Å–æ–≤–Ω—è",
    "–°–º–æ—Ç—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞",
    "–°–∫–≤–µ—Ä",
    "–°–∞–¥",
    "–õ–µ—Å–æ–ø–∞—Ä–∫",
    "–ó–∞–ø–æ–≤–µ–¥–Ω–∏–∫",
    "–ú–µ—Å—Ç–æ –¥–ª—è –ø–∏–∫–Ω–∏–∫–∞",
    "–ê–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏",
    "–†—é–º–æ—á–Ω–∞—è",
    "–ü–∏–≤–æ–≤–∞—Ä–Ω—è",
    "–ü–∏–≤–æ–≤–∞—Ä–µ–Ω–Ω—ã–π –∑–∞–≤–æ–¥",
    "–°—ã—Ä–æ–≤–∞—Ä–Ω—è",
    "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä",
    "–ò–≥–æ—Ä–Ω–æ–µ –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
    "–ë–∏–ª—å—è—Ä–¥–Ω—ã–π –∫–ª—É–±",
    "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏",
    "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª—É–±",
    "–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç",
    "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏–≥—Ä—ã",
    "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–æ-–∫–æ–Ω—Ü–µ—Ä—Ç–Ω–∞—è –∫–∞—Å—Å–∞",
    "–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –∏ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞",
    "–ì–æ—Ä–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞",
    "–û–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è",
    "–ê—ç—Ä–æ–∫–ª—É–±",
    "–ê—ç—Ä–æ—Ç—Ä—É–±–∞",
    "–¶–µ–Ω—Ç—Ä —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞",
    "–ó–∏–º–Ω–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "–†–µ—Ç—Ä–∏—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
    "–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç",
    "–ß–∞–π–Ω–∞—è",
    "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –±–∞—Ä",
    "–°–∫–µ–π—Ç-–ø–∞—Ä–∫",
    "–¢–∞–Ω—Ü–ø–ª–æ—â–∞–¥–∫–∞",
    "–û—Ä–∫–µ—Å—Ç—Ä",
    "–¢–∏—Ä",
    "–õ–æ–¥–æ—á–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è",
    "–í–æ–¥–Ω–∞—è –±–∞–∑–∞",
]

user_data: dict[int, dict[Any, Any]] = {}


def generate_place_text(
    place: dict[Any, Any],
    website: str,
    rating_text: str,
    distance_text: str | None = None,
) -> str:
    place_name = (
        f"<a href='{website}'>{place.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</a>" if website else place.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    )
    rating = rating_text + distance_text if distance_text else rating_text
    return f"""
    <b>–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:</b> {place_name}
    <b>–§–∏–ª—å—Ç—Ä—ã:</b> {place.get("categories", "–ù–µ —É–∫–∞–∑–∞–Ω—ã")}
    <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}
    <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {place.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")}
    <b>–ê–¥—Ä–µ—Å:</b> {place.get("address", "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")}
    """


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã


async def get_filters_keyboard(user_id: int, page: int = 0) -> InlineKeyboardMarkup:
    user_filters = await db_service.get_user_filters(user_id)
    buttons = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    items_per_page = 8
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page
    current_filters = AVAILABLE_FILTERS[start_idx:end_idx]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
    for i in range(0, len(current_filters), 2):
        row = []
        for filter_name in current_filters[i : i + 2]:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_name = filter_name[:20] + "..." if len(filter_name) > 23 else filter_name
            emoji = "‚úÖ " if filter_name in user_filters else ""
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å —Ñ–∏–ª—å—Ç—Ä–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            filter_index = AVAILABLE_FILTERS.index(filter_name)
            row.append(
                InlineKeyboardButton(
                    text=f"{emoji}{display_name}",
                    callback_data=f"filter_{filter_index}_{page}",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                )
            )
        buttons.append(row)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    total_pages = (len(AVAILABLE_FILTERS) + items_per_page - 1) // items_per_page

    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"filters_page_{page - 1}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    nav_buttons.append(InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="current_page"))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"filters_page_{page + 1}"))

    if nav_buttons:
        buttons.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    buttons.append([InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞", callback_data="search_filter")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_filters")])
    buttons.append([InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="reset_all_filters")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìç –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç", callback_data="view_places_main"),
                InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="show_categories_main"),
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã", callback_data="show_filters_main"),
                InlineKeyboardButton(text="üó∫Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", callback_data="show_geolocation_main"),
            ],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help_main")],
        ]
    )


def get_categories_keyboard(user_id: int) -> InlineKeyboardMarkup:
    selected_categories = user_data.get(user_id, {}).get("selected_categories", set())
    buttons = []

    categories = [
        ("–°–µ–º–µ–π–Ω—ã–π", "–°–µ–º–µ–π–Ω—ã–π"),
        ("–° –¥—Ä—É–∑—å—è–º–∏", "–° –¥—Ä—É–∑—å—è–º–∏"),
        ("–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π"),
        ("–ê–∫—Ç–∏–≤–Ω—ã–π", "–ê–∫—Ç–∏–≤–Ω—ã–π"),
        ("–°–ø–æ–∫–æ–π–Ω—ã–π", "–°–ø–æ–∫–æ–π–Ω—ã–π"),
        ("–£–µ–¥–∏–Ω—ë–Ω–Ω—ã–π", "–£–µ–¥–∏–Ω—ë–Ω–Ω—ã–π"),
        ("–ö—É–ª—å—Ç—É—Ä–Ω—ã–π", "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π"),
        ("–ù–∞ –≤–æ–∑–¥—É—Ö–µ", "–ù–∞ –≤–æ–∑–¥—É—Ö–µ"),
    ]

    for i in range(0, len(categories), 2):
        row = []
        for text, callback_data in categories[i : i + 2]:
            emoji = "‚úÖ " if callback_data in selected_categories else ""
            row.append(InlineKeyboardButton(text=f"{emoji}{text}", callback_data=callback_data))
        buttons.append(row)

    buttons.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_categories")])
    buttons.append([InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="reset_all_categories")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_wishes_keyboard(user_id: int) -> InlineKeyboardMarkup:
    selected_wishes = user_data.get(user_id, {}).get("selected_wishes", set())
    buttons = []

    wishes = [
        ("–¢—É—Å–æ–≤–∫–∏", "–¢—É—Å–æ–≤–∫–∏"),
        ("–í–∫—É—Å–Ω–∞—è –µ–¥–∞", "–í–∫—É—Å–Ω–∞—è –µ–¥–∞"),
        ("–ö—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥", "–ö—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥"),
        ("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"),
        ("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"),
        ("–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ", "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ"),
        ("–ú—É–∑—ã–∫–∞", "–ú—É–∑—ã–∫–∞"),
        ("–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ—Å—Ç—å", "–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ—Å—Ç—å"),
        ("–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ"),
    ]

    for i in range(0, len(wishes), 2):
        row = []
        for text, callback_data in wishes[i : i + 2]:
            emoji = "‚úÖ " if callback_data in selected_wishes else ""
            row.append(InlineKeyboardButton(text=f"{emoji}{text}", callback_data=callback_data))
        buttons.append(row)

    buttons.append([InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_wishes")])
    buttons.append([InlineKeyboardButton(text="üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è", callback_data="reset_all_wishes")])
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_places_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="place_prev"),
                InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="place_next"),
            ],
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
                InlineKeyboardButton(text="‚ùå –° –º–µ—Å—Ç–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫", callback_data="place_bad"),
            ],
        ]
    )


def get_back_to_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    )
