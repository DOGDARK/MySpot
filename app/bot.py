import asyncio
import logging

import pytz
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from app.instances import db_service
from app.settings import Settings
from app.utils import (
    AVAILABLE_FILTERS,
    generate_place_text,
    get_back_to_main_keyboard,
    get_categories_keyboard,
    get_filters_keyboard,
    get_main_keyboard,
    get_places_keyboard,
    get_wishes_keyboard,
    user_data,
)

logger = logging.getLogger(__name__)

MODERATORS_CHAT_ID = Settings.MODERATORS_CHAT_ID
START_IMG_PATH = "app/data/images/start_img.jpg"


bot = Bot(token=Settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_messages: dict[int, int] = {}


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FilterStates(StatesGroup):
    waiting_for_filter_name = State()


# –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
@dp.callback_query(F.data == "place_bad")
async def process_place_bad(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    places = user_data[user_id].get("places", [])
    index = user_data[user_id].get("current_place_index", 0)

    if not places or index >= len(places):
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.", show_alert=True)
        return

    place = places[index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    rating = place.get("rating")
    rating_text = f"‚≠ê {rating}/5" if rating else "‚≠ê –†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω"

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –º–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories_text, wishes_text, website = await db_service.get_categories_and_wishes(place)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    place_text = generate_place_text(place, website, rating_text)

    photo_url = place.get("photo")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback_query.answer("–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ‚úÖ", show_alert=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
    try:
        if photo_url and isinstance(photo_url, str) and photo_url.startswith(("http://", "https://")):
            if len(place_text) <= 1000:
                await callback_query.bot.send_photo(
                    chat_id=MODERATORS_CHAT_ID,
                    photo=photo_url,
                    caption=place_text,
                    parse_mode="HTML",
                )
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                await callback_query.bot.send_photo(chat_id=MODERATORS_CHAT_ID, photo=photo_url)
                await callback_query.bot.send_message(chat_id=MODERATORS_CHAT_ID, text=place_text, parse_mode="HTML")
        else:
            await callback_query.bot.send_message(chat_id=MODERATORS_CHAT_ID, text=place_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback_query.bot.send_message(chat_id=MODERATORS_CHAT_ID, text=place_text, parse_mode="HTML")

    # –ü–æ–º–µ—á–∞–µ–º –º–µ—Å—Ç–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
    await db_service.mark_place_as_viewed(user_id, place.get("name"))


@dp.callback_query(F.data == "reset_location")
async def reset_location(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db_service.get_user(user_id)

    if user:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        await db_service.save_user(
            user_id=user_id,
            categories=user["categories"],
            wishes=user["wishes"],
            filters=user["filters"],
            latitude=None,
            longitude=None,
        )

    # –ü–û–õ–ù–û–°–¢–¨–Æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Å—Ç (—Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è)
    await db_service.create_user_places_table(user_id)

    reset_text = """
    üó∫Ô∏è <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞</b>

    –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    """

    try:
        await callback.message.edit_text(
            text=reset_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üó∫Ô∏è –£–∫–∞–∑–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                            callback_data="request_location",
                        )
                    ],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                ]
            ),
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=reset_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üó∫Ô∏è –£–∫–∞–∑–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                            callback_data="request_location",
                        )
                    ],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                ]
            ),
        )

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id)


@dp.callback_query(F.data == "reset_viewed")
async def reset_viewed(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    await db_service.reset_viewed(user_id)
    await callback.answer()


@dp.callback_query(F.data == "reset_all_filters")
async def reset_all_filters(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    await db_service.save_user_filters(user_id, [])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    filters_text = """
    ‚öôÔ∏è <b>–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</b>

    –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
    ‚ùå –§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã

    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
    """

    try:
        await callback.message.edit_text(text=filters_text, reply_markup=await get_filters_keyboard(user_id, 0))
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=filters_text,
            reply_markup=await get_filters_keyboard(user_id, 0),
        )

    await callback.answer("–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "reset_all_filters")


@dp.callback_query(F.data == "reset_all_categories")
async def reset_all_categories(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if user_id in user_data:
        user_data[user_id]["selected_categories"] = set()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    categories_text = """
    üéØ <b>–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç–¥—ã—Ö–∞</b>

    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –æ—Ç–¥—ã—Ö–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
    ‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π - –æ—Ç–¥—ã—Ö —Å –¥–µ—Ç—å–º–∏ –∏ —Å–µ–º—å–µ–π
    ‚Ä¢ üë• –° –¥—Ä—É–∑—å—è–º–∏ - –≤–µ—Å–µ–ª–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏  
    ‚Ä¢ üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π - –¥–ª—è –ø–∞—Ä –∏ —Å–≤–∏–¥–∞–Ω–∏–π
    ‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π - —Å–ø–æ—Ä—Ç –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
    ‚Ä¢ üßò‚Äç‚ôÇÔ∏è –°–ø–æ–∫–æ–π–Ω—ã–π - —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ –æ—Ç–¥—ã—Ö
    ‚Ä¢ üåø –£–µ–¥–∏–Ω—ë–Ω–Ω—ã–π - —Ç–∏—Ö–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —É–µ–¥–∏–Ω–µ–Ω–∏—è
    ‚Ä¢ üé≠ –ö—É–ª—å—Ç—É—Ä–Ω—ã–π - –º—É–∑–µ–∏, —Ç–µ–∞—Ç—Ä—ã, –≤—ã—Å—Ç–∞–≤–∫–∏
    ‚Ä¢ üå≥ –ù–∞ –≤–æ–∑–¥—É—Ö–µ - –ø–∞—Ä–∫–∏, –ø—Ä–∏—Ä–æ–¥–∞, —É–ª–∏—Ü–∞

    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    """

    try:
        await callback.message.edit_text(text=categories_text, reply_markup=get_categories_keyboard(user_id))
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=categories_text,
            reply_markup=get_categories_keyboard(user_id),
        )

    await callback.answer("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "reset_all_categories")


@dp.callback_query(F.data == "reset_all_wishes")
async def reset_all_wishes(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
    if user_id in user_data:
        user_data[user_id]["selected_wishes"] = set()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    wishes_text = """
üåü <b>–í—ã–±–æ—Ä –ø–æ–∂–µ–ª–∞–Ω–∏–π</b>

    –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–ª—è –≤–∞–º –≤–∞–∂–Ω–æ –≤ –º–µ—Å—Ç–µ –æ—Ç–¥—ã—Ö–∞. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b>
    ‚Ä¢ üéâ –¢—É—Å–æ–≤–∫–∏ - –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
    ‚Ä¢ üçî –í–∫—É—Å–Ω–∞—è –µ–¥–∞ - –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è
    ‚Ä¢ üåÖ –ö—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥ - –∂–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –ø–∞–Ω–æ—Ä–∞–º—ã
    ‚Ä¢ ‚öΩ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∏–≥—Ä—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    ‚Ä¢ üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è - –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã –∏ –∏–≥—Ä—ã
    ‚Ä¢ üòå –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ - —Ä–µ–ª–∞–∫—Å –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
    ‚Ä¢ üéµ –ú—É–∑—ã–∫–∞ - –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    ‚Ä¢ ‚ú® –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ—Å—Ç—å - –æ—Å–æ–±–µ–Ω–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –º–µ—Å—Ç–∞
    ‚Ä¢ üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ - –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ

    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    """

    try:
        await callback.message.edit_text(text=wishes_text, reply_markup=get_wishes_keyboard(user_id))
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(chat_id=chat_id, text=wishes_text, reply_markup=get_wishes_keyboard(user_id))

    await callback.answer("–í—Å–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "reset_all_wishes")


async def show_place(user_id: int, chat_id: int, index: int):
    logger.info("show_place")
    places = user_data[user_id].get("places", [])
    logger.info(len(places))

    if not places or index >= len(places):
        return

    place = places[index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    rating = place.get("rating")
    rating_text = f"‚≠ê {rating}/5" if rating else "‚≠ê –†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω"

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –º–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏
    categories_text, wishes_text, website = await db_service.get_categories_and_wishes(place)
    # –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_service.get_user(user_id)

    distance_text = ""

    if user and user["latitude"] and user["longitude"] and place.get("latitude") and place.get("longitude"):
        try:
            from math import atan2, cos, radians, sin, sqrt

            user_lat = user["latitude"]
            user_lon = user["longitude"]
            place_lat = float(place["latitude"])
            place_lon = float(place["longitude"])

            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
            lat1_rad = radians(user_lat)
            lon1_rad = radians(user_lon)
            lat2_rad = radians(place_lat)
            lon2_rad = radians(place_lon)

            dlon = lon2_rad - lon1_rad
            dlat = lat2_rad - lat1_rad

            a = sin(dlat / 2) ** 2 + cos(lat1_rad) * cos(lat2_rad) * sin(dlon / 2) ** 2
            c = 2 * atan2(sqrt(a), sqrt(1 - a))

            distance = R * c
            distance_text = f"\n<b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {distance:.1f} –∫–º –æ—Ç –≤–∞—Å"

        except (ValueError, TypeError):
            # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
    logger.info(len(places))
    place_text = generate_place_text(place, website, rating_text, distance_text)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    photo_url = place.get("photo")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ photo_url –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    if photo_url and isinstance(photo_url, str) and photo_url.startswith(("http://", "https://")):
        try:
            await update_or_send_message(
                chat_id=chat_id,
                text=place_text,
                reply_markup=get_places_keyboard(),
                photo_url=photo_url,
            )
        except Exception as e:
            logger.error(f"Error sending photo message: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
            await update_or_send_message(chat_id=chat_id, text=place_text, reply_markup=get_places_keyboard())
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
        await update_or_send_message(chat_id=chat_id, text=place_text, reply_markup=get_places_keyboard())
    # –ü–æ–º–µ—á–∞–µ–º –º–µ—Å—Ç–æ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    await db_service.mark_place_as_viewed(user_id, place.get("name"))


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏


async def delete_user_message(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"Error while deleting user msg, {e}")


async def update_or_send_message(chat_id: int, text: str, reply_markup=None, photo_url: str = None):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ"""
    logger.info("update_or_send")
    if chat_id in user_messages:
        try:
            if photo_url:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                message = await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_url,
                    caption=text,
                    reply_markup=reply_markup,
                )
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await bot.delete_message(chat_id=chat_id, message_id=user_messages[chat_id])
                except Exception as e:
                    logger.error(f"Error while deleting user msg, {e}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    message = await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=user_messages[chat_id],
                        text=text,
                        reply_markup=reply_markup,
                    )
                except Exception as edit_error:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.error(f"Error editing message, sending new: {edit_error}")
                    message = await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await bot.delete_message(chat_id=chat_id, message_id=user_messages[chat_id])
                    except Exception as e:
                        logger.error(f"Error while deleting user msg, {e}")

            user_messages[chat_id] = message.message_id
            return message.message_id
        except Exception as e:
            logger.error(f"Error in update_or_send_message: {e}")
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if photo_url:
                    message = await bot.send_photo(
                        chat_id=chat_id,
                        photo=photo_url,
                        caption=text,
                        reply_markup=reply_markup,
                    )
                else:
                    message = await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
                user_messages[chat_id] = message.message_id
                return message.message_id
            except Exception as e2:
                logger.error(f"Error sending new message: {e2}")
                return None
    else:
        try:
            if photo_url:
                message = await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_url,
                    caption=text,
                    reply_markup=reply_markup,
                )
            else:
                message = await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
            user_messages[chat_id] = message.message_id
            return message.message_id
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    logger.info("cmd_start")
    user_id = message.from_user.id
    chat_id = message.chat.id
    print(chat_id)
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_db_data = await db_service.get_user(user_id)
    if user_db_data:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data[user_id] = {
            "selected_categories": set(user_db_data["categories"]),
            "selected_wishes": set(user_db_data["wishes"]),
            "current_place_index": 0,
        }
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏ (–Ω–æ –Ω–µ –≤ –±–∞–∑–µ –¥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
        await db_service.save_user(user_id)
        user_data[user_id] = {
            "selected_categories": set(),
            "selected_wishes": set(),
            "current_place_index": 0,
        }

    photo = FSInputFile(START_IMG_PATH)
    welcome_text = """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Myspot!</b>

    –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.

    <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
    ‚Ä¢ üìç –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç - —Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    ‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞
    ‚Ä¢ ‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–∏—Å–∫
    ‚Ä¢ üó∫Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è - –∏—â–∏—Ç–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º
    ‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - –ø–æ–ª—É—á–∏—Ç–µ —Å–ø—Ä–∞–≤–∫—É

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá
        """

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update_or_send_message(
        chat_id=message.chat.id, text=welcome_text, reply_markup=get_main_keyboard(), photo_url=photo
    )

    # –ü–æ—Ç–æ–º —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π start
    await delete_user_message(message)


@dp.message(Command("stats"))
async def daily_report(message: types.Message, by_timer = False):
    chat_id = message.chat.id
    if by_timer:
        stats = db_service.user_count
        stat_message = f"""
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π<b>
    –°–µ–≥–æ–¥–Ω—è {stats[0]} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –í—Å–µ–≥–æ {stats[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        bot.send_message(chat_id=..., text=stat_message, parse_mode='HTML')
        db_service.change_user_count(reset=True)
    else: 
        if chat_id == ...:
            stats = db_service.user_count
            stat_message = f"""
    <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π<b>
        –°–µ–≥–æ–¥–Ω—è {stats[0]} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        –í—Å–µ–≥–æ {stats[1]} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            """
            bot.send_message(chat_id=chat_id, text=stat_message, parse_mode='HTML')



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(F.data == "view_places_main")
async def show_places_main(callback: types.CallbackQuery):
    logger.info("show_places_main")
    user_id = callback.from_user.id
    user = await db_service.get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
    places = await db_service.get_places_for_user(user_id, limit=400, offset=0, sort_by_distance=False)

    if not places:
        # –í—Å–µ –º–µ—Å—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã
        all_viewed_text = """
üéâ <b>–í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!</b>

    –í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.

    –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
    ‚Ä¢ üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    ‚Ä¢ ‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    ‚Ä¢ üó∫Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    """

        try:
            await callback.message.edit_text(
                text=all_viewed_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                                callback_data="reset_viewed",
                            )
                        ],
                        [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_menu")],
                        [
                            InlineKeyboardButton(
                                text="üó∫Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                                callback_data="show_geolocation_main",
                            )
                        ],
                    ]
                ),
            )
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            chat_id = callback.message.chat.id
            await update_or_send_message(
                chat_id=chat_id,
                text=all_viewed_text,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                                callback_data="reset_viewed",
                            )
                        ],
                        [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_menu")],
                        [
                            InlineKeyboardButton(
                                text="üó∫Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                                callback_data="show_geolocation_main",
                            )
                        ],
                    ]
                ),
            )

        await callback.answer()
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
    if user is not None and user["latitude"] is not None and user["longitude"] is not None:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        choice_text = """
    üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Å—Ç:</b>

    ‚Ä¢ üó∫Ô∏è –ë–ª–∏–∂–∞–π—à–∏–µ - –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    ‚Ä¢ ‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ - –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    """

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üó∫Ô∏è –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞", callback_data="view_nearby_places")],
                [InlineKeyboardButton(text="‚≠ê –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="view_recommended_places")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
            ]
        )

        try:
            await callback.message.edit_text(text=choice_text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            chat_id = callback.message.chat.id
            await update_or_send_message(chat_id=chat_id, text=choice_text, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        user_data[user_id]["current_place_index"] = 0
        user_data[user_id]["current_offset"] = 0

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id]["places"] = places

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
        await show_place(user_id, callback.message.chat.id, 0)

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "view_places_main")


@dp.callback_query(F.data == "view_nearby_places")
async def view_nearby_places(callback: types.CallbackQuery):
    logger.info("view_nearby")
    user_id = callback.from_user.id
    user_data[user_id]["current_place_index"] = 0
    user_data[user_id]["current_offset"] = 0

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    places = await db_service.get_places_for_user(user_id, limit=400, offset=0, sort_by_distance=True)

    if not places:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç –º–µ—Å—Ç
        no_places_text = """
    ‚ùå <b>–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

    –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç —Ä—è–¥–æ–º —Å –≤–∞–º–∏.
    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã.
    """

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                        callback_data="show_categories_main",
                    )
                ],
                [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="show_filters_main")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

        try:
            await callback.message.edit_text(text=no_places_text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            chat_id = callback.message.chat.id
            await update_or_send_message(chat_id=chat_id, text=no_places_text, reply_markup=keyboard)

        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]["places"] = places

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
    await show_place(user_id, callback.message.chat.id, 0)

    await callback.answer()


@dp.callback_query(F.data == "view_recommended_places")
async def view_recommended_places(callback: types.CallbackQuery):
    logger.info("view_recommended")
    user_id = callback.from_user.id
    user_data[user_id]["current_place_index"] = 0
    user_data[user_id]["current_offset"] = 0

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–∞ –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    places = await db_service.get_places_for_user(user_id, limit=400, offset=0, sort_by_distance=False)

    if not places:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç –º–µ—Å—Ç
        no_places_text = """
    ‚ùå <b>–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

    –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã.
    """

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                        callback_data="show_categories_main",
                    )
                ],
                [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="show_filters_main")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

        try:
            await callback.message.edit_text(text=no_places_text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            chat_id = callback.message.chat.id
            await update_or_send_message(chat_id=chat_id, text=no_places_text, reply_markup=keyboard)

        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]["places"] = places

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
    await show_place(user_id, callback.message.chat.id, 0)

    await callback.answer()


@dp.callback_query(F.data == "show_categories_main")
async def show_categories_main(callback: types.CallbackQuery):
    categories_text = """
    üéØ <b>–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç–¥—ã—Ö–∞</b>

    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –æ—Ç–¥—ã—Ö–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
    ‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π - –æ—Ç–¥—ã—Ö —Å –¥–µ—Ç—å–º–∏ –∏ —Å–µ–º—å–µ–π
    ‚Ä¢ üë• –° –¥—Ä—É–∑—å—è–º–∏ - –≤–µ—Å–µ–ª–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏  
    ‚Ä¢ üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π - –¥–ª—è –ø–∞—Ä –∏ —Å–≤–∏–¥–∞–Ω–∏–π
    ‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π - —Å–ø–æ—Ä—Ç –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
    ‚Ä¢ üßò‚Äç‚ôÇÔ∏è –°–ø–æ–∫–æ–π–Ω—ã–π - —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ –æ—Ç–¥—ã—Ö
    ‚Ä¢ üåø –£–µ–¥–∏–Ω—ë–Ω–Ω—ã–π - —Ç–∏—Ö–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —É–µ–¥–∏–Ω–µ–Ω–∏—è
    ‚Ä¢ üé≠ –ö—É–ª—å—Ç—É—Ä–Ω—ã–π - –º—É–∑–µ–∏, —Ç–µ–∞—Ç—Ä—ã, –≤—ã—Å—Ç–∞–≤–∫–∏
    ‚Ä¢ üå≥ –ù–∞ –≤–æ–∑–¥—É—Ö–µ - –ø–∞—Ä–∫–∏, –ø—Ä–∏—Ä–æ–¥–∞, —É–ª–∏—Ü–∞

    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        """

    try:
        await callback.message.edit_text(
            text=categories_text,
            reply_markup=get_categories_keyboard(callback.from_user.id),
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=categories_text,
            reply_markup=get_categories_keyboard(callback.from_user.id),
        )

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "show_categories_main")


@dp.callback_query(F.data == "show_filters_main")
async def show_filters_main(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_filters = await db_service.get_user_filters(user_id)

    filters_text = """
    ‚öôÔ∏è <b>–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</b>

    –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
    """

    if user_filters:
        for filter_name in user_filters:
            filters_text += f"‚Ä¢ {filter_name}\n"
    else:
        filters_text += "‚ùå –§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n"

    filters_text += "\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'"

    try:
        await callback.message.edit_text(text=filters_text, reply_markup=await get_filters_keyboard(user_id, 0))
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=filters_text,
            reply_markup=await get_filters_keyboard(user_id, 0),
        )

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "show_filters_main")


@dp.callback_query(F.data.startswith("filters_page_"))
async def handle_filters_page(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    page = int(callback.data.split("_")[2])

    user_filters = await db_service.get_user_filters(user_id)

    filters_text = """
    ‚öôÔ∏è <b>–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</b>

    –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
    """

    if user_filters:
        for filter_name in user_filters:
            filters_text += f"‚Ä¢ {filter_name}\n"
    else:
        filters_text += "‚ùå –§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n"

    filters_text += "\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'"

    try:
        await callback.message.edit_text(text=filters_text, reply_markup=await get_filters_keyboard(user_id, page))
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=filters_text,
            reply_markup=await get_filters_keyboard(user_id, page),
        )

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id)


@dp.callback_query(F.data.startswith("filter_"))
async def handle_filter_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: filter_–∏–Ω–¥–µ–∫—Å_—Å—Ç—Ä–∞–Ω–∏—Ü–∞
    parts = callback.data.split("_")
    filter_index = int(parts[1])
    current_page = int(parts[2])

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    filter_name = AVAILABLE_FILTERS[filter_index]

    user_filters = await db_service.get_user_filters(user_id)

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    if filter_name in user_filters:
        user_filters.remove(filter_name)
    else:
        user_filters.append(filter_name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    await db_service.save_user_filters(user_id, user_filters)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_filters = await db_service.get_user_filters(user_id)

    filters_text = """
    ‚öôÔ∏è <b>–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</b>

    –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
    """

    if user_filters:
        for filter_name in user_filters:
            filters_text += f"‚Ä¢ {filter_name}\n"
    else:
        filters_text += "‚ùå –§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n"

    filters_text += "\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'"

    try:
        await callback.message.edit_text(
            text=filters_text, reply_markup=await get_filters_keyboard(user_id, current_page)
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=filters_text,
            reply_markup=await get_filters_keyboard(user_id, current_page),
        )

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id)


@dp.callback_query(F.data == "search_filter")
async def search_filter(callback: types.CallbackQuery, state: FSMContext):
    search_text = """
    üîç <b>–ü–æ–∏—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞</b>

    –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:
    """

    try:
        await callback.message.edit_text(
            text=search_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="show_filters_main")]]
            ),
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=search_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º", callback_data="show_filters_main")]]
            ),
        )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
    await state.set_state(FilterStates.waiting_for_filter_name)
    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id)


@dp.message(FilterStates.waiting_for_filter_name)
async def process_filter_search(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    filter_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä
    if filter_name in AVAILABLE_FILTERS:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        user_filters = await db_service.get_user_filters(user_id)
        user_filters.append(filter_name)
        await db_service.save_user_filters(user_id, user_filters)

        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä
        filter_index = AVAILABLE_FILTERS.index(filter_name)
        filter_page = filter_index // 8

        success_text = f"""
    ‚úÖ <b>–§–∏–ª—å—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω</b>

    –§–∏–ª—å—Ç—Ä "{filter_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
    """

        await update_or_send_message(
            chat_id=message.chat.id,
            text=success_text,
            reply_markup=await get_filters_keyboard(user_id, filter_page),  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å—Ç—Ä–∞
        )
    else:
        error_text = f"""
    ‚ùå <b>–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

    –§–∏–ª—å—Ç—Ä "{filter_name}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. 
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """

        await update_or_send_message(
            chat_id=message.chat.id,
            text=error_text,
            reply_markup=await get_filters_keyboard(user_id, 0),
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_user_message(message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(message.from_user.id)


@dp.callback_query(F.data == "confirm_filters")
async def confirm_filters(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_filters = await db_service.get_user_filters(user_id)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–±–æ—Ä–∞
    processing_text = """
    ‚è≥ <b>–ò–¥—ë—Ç –ø–æ–¥–±–æ—Ä –º–µ—Å—Ç –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º...</b>

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ú—ã –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º.
    """

    processing_message_id = await update_or_send_message(callback.message.chat.id, processing_text)

    await db_service.create_user_places_table(user_id)

    confirmation_text = f"""
    ‚úÖ <b>–§–∏–ª—å—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>

    <b>–í—ã–±—Ä–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤:</b> {len(user_filters)}

    –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ—Å—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
    """

    try:
        await callback.message.edit_text(
            text=confirmation_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìç –°–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–∞", callback_data="view_places_main")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                ]
            ),
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if processing_message_id:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=processing_message_id)
            except Exception as e:
                logger.error(f"Error while deleting msh {e}")

        await update_or_send_message(
            chat_id=chat_id,
            text=confirmation_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìç –°–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–∞", callback_data="view_places_main")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                ]
            ),
        )

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "confirm_filters")


@dp.callback_query(F.data == "show_geolocation_main")
async def show_geolocation_main(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await db_service.get_user(user_id)

    geo_text = """
    üó∫Ô∏è <b>–ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</b>

    –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.
    """

    if user and user["latitude"] is not None and user["longitude"] is not None:
        geo_text += f"""
    <b>–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ</b>
    üìç –®–∏—Ä–æ—Ç–∞: {user["latitude"]:.6f}
    üìç –î–æ–ª–≥–æ—Ç–∞: {user["longitude"]:.6f}

    –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.
    """
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìç –°–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º", callback_data="view_places_main")],
                [InlineKeyboardButton(text="üó∫Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="request_location")],
                [InlineKeyboardButton(text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="reset_location")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )
    else:
        geo_text += """
    ‚ùå <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ</b>

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.
    """
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="request_location")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        )

    try:
        await callback.message.edit_text(text=geo_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(chat_id=chat_id, text=geo_text, reply_markup=keyboard)

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "show_geolocation_main")


@dp.callback_query(F.data == "request_location")
async def request_location(callback: types.CallbackQuery):
    location_text = """
üó∫Ô∏è <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.

    –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìé" (—Å–∫—Ä–µ–ø–∫–∞) –≤–Ω–∏–∑—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ".
    """

    try:
        await callback.message.edit_text(
            text=location_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_geolocation_main")]]
            ),
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=location_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_geolocation_main")]]
            ),
        )

    await callback.answer()


@dp.message(F.content_type == "location")
async def handle_location(message: types.Message):
    user_id = message.from_user.id
    latitude = message.location.latitude
    longitude = message.location.longitude

    print(latitude, longitude)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db_service.get_user(user_id)
    if user:
        await db_service.save_user(
            user_id=user_id,
            categories=user["categories"],
            wishes=user["wishes"],
            filters=user["filters"],
            latitude=latitude,
            longitude=longitude,
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        await db_service.save_user(
            user_id=user_id,
            categories=[],
            wishes=[],
            filters=[],
            latitude=latitude,
            longitude=longitude,
        )

    # –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Å—Ç —Å –Ω–æ–≤–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    await db_service.create_user_places_table(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    location_text = """
    üìç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>

    –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.
    –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏.
    """

    await update_or_send_message(
        chat_id=message.chat.id,
        text=location_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìç –°–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º", callback_data="view_places_main")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            ]
        ),
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    await delete_user_message(message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(message.from_user.id)


@dp.callback_query(F.data == "show_help_main")
async def show_help_main(callback: types.CallbackQuery):
    help_text = """
    ‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

    <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
    1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–¥—ã—Ö–∞
    2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è
    3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
    4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è

    <b>–ö–æ–º–∞–Ω–¥—ã:</b>
    /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        """

    try:
        await callback.message.edit_text(text=help_text, reply_markup=get_back_to_main_keyboard())
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(chat_id=chat_id, text=help_text, reply_markup=get_back_to_main_keyboard())

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "show_help_main")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query(
    F.data.in_(
        [
            "–°–µ–º–µ–π–Ω—ã–π",
            "–° –¥—Ä—É–∑—å—è–º–∏",
            "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π",
            "–ê–∫—Ç–∏–≤–Ω—ã–π",
            "–°–ø–æ–∫–æ–π–Ω—ã–π",
            "–£–µ–¥–∏–Ω—ë–Ω–Ω—ã–π",
            "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π",
            "–ù–∞ –≤–æ–∑–¥—É—Ö–µ",
        ]
    )
)
async def handle_category_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    category = callback.data

    if user_id not in user_data:
        user_data[user_id] = {"selected_categories": set(), "selected_wishes": set()}

    if category in user_data[user_id]["selected_categories"]:
        user_data[user_id]["selected_categories"].remove(category)
    else:
        user_data[user_id]["selected_categories"].add(category)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫
    categories_text = """
    üéØ <b>–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç–¥—ã—Ö–∞</b>

    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –æ—Ç–¥—ã—Ö–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
    ‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º–µ–π–Ω—ã–π - –æ—Ç–¥—ã—Ö —Å –¥–µ—Ç—å–º–∏ –∏ —Å–µ–º—å–µ–π
    ‚Ä¢ üë• –° –¥—Ä—É–∑—å—è–º–∏ - –≤–µ—Å–µ–ª–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏  
    ‚Ä¢ üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π - –¥–ª—è –ø–∞—Ä –∏ —Å–≤–∏–¥–∞–Ω–∏–π
    ‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π - —Å–ø–æ—Ä—Ç –∏ –¥–≤–∏–∂–µ–Ω–∏–µ
    ‚Ä¢ üßò‚Äç‚ôÇÔ∏è –°–ø–æ–∫–æ–π–Ω—ã–π - —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ –æ—Ç–¥—ã—Ö
    ‚Ä¢ üåø –£–µ–¥–∏–Ω—ë–Ω–Ω—ã–π - —Ç–∏—Ö–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —É–µ–¥–∏–Ω–µ–Ω–∏—è
    ‚Ä¢ üé≠ –ö—É–ª—å—Ç—É—Ä–Ω—ã–π - –º—É–∑–µ–∏, —Ç–µ–∞—Ç—Ä—ã, –≤—ã—Å—Ç–∞–≤–∫–∏
    ‚Ä¢ üå≥ –ù–∞ –≤–æ–∑–¥—É—Ö–µ - –ø–∞—Ä–∫–∏, –ø—Ä–∏—Ä–æ–¥–∞, —É–ª–∏—Ü–∞

    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        """

    try:
        await callback.message.edit_text(text=categories_text, reply_markup=get_categories_keyboard(user_id))
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=categories_text,
            reply_markup=get_categories_keyboard(user_id),
        )

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id)


@dp.callback_query(F.data == "confirm_categories")
async def confirm_categories(callback: types.CallbackQuery):
    wishes_text = """
    üåü <b>–í—ã–±–æ—Ä –ø–æ–∂–µ–ª–∞–Ω–∏–π</b>

    –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–ª—è –≤–∞–º –≤–∞–∂–Ω–æ –≤ –º–µ—Å—Ç–µ –æ—Ç–¥—ã—Ö–∞. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b>
    ‚Ä¢ üéâ –¢—É—Å–æ–≤–∫–∏ - –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
    ‚Ä¢ üçî –í–∫—É—Å–Ω–∞—è –µ–¥–∞ - –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è
    ‚Ä¢ üåÖ –ö—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥ - –∂–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –ø–∞–Ω–æ—Ä–∞–º—ã
    ‚Ä¢ ‚öΩ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∏–≥—Ä—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    ‚Ä¢ üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è - –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã –∏ –∏–≥—Ä—ã
    ‚Ä¢ üòå –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ - —Ä–µ–ª–∞–∫—Å –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
    ‚Ä¢ üéµ –ú—É–∑—ã–∫–∞ - –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    ‚Ä¢ ‚ú® –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ—Å—Ç—å - –æ—Å–æ–±–µ–Ω–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –º–µ—Å—Ç–∞
    ‚Ä¢ üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ - –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ

    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        """

    try:
        await callback.message.edit_text(text=wishes_text, reply_markup=get_wishes_keyboard(callback.from_user.id))
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=wishes_text,
            reply_markup=get_wishes_keyboard(callback.from_user.id),
        )

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "confirm_categories")


@dp.callback_query(
    F.data.in_(
        [
            "–¢—É—Å–æ–≤–∫–∏",
            "–í–∫—É—Å–Ω–∞—è –µ–¥–∞",
            "–ö—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥",
            "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
            "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ",
            "–ú—É–∑—ã–∫–∞",
            "–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ—Å—Ç—å",
            "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
        ]
    )
)
async def handle_wish_selection(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    wish = callback.data

    if user_id not in user_data:
        user_data[user_id] = {"selected_categories": set(), "selected_wishes": set()}

    if wish in user_data[user_id]["selected_wishes"]:
        user_data[user_id]["selected_wishes"].remove(wish)
    else:
        user_data[user_id]["selected_wishes"].add(wish)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    wishes_text = """
    üåü <b>–í—ã–±–æ—Ä –ø–æ–∂–µ–ª–∞–Ω–∏–π</b>

    –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–ª—è –≤–∞–º –≤–∞–∂–Ω–æ –≤ –º–µ—Å—Ç–µ –æ—Ç–¥—ã—Ö–∞. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b>
    ‚Ä¢ üéâ –¢—É—Å–æ–≤–∫–∏ - –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
    ‚Ä¢ üçî –í–∫—É—Å–Ω–∞—è –µ–¥–∞ - –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è
    ‚Ä¢ üåÖ –ö—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥ - –∂–∏–≤–æ–ø–∏—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –ø–∞–Ω–æ—Ä–∞–º—ã
    ‚Ä¢ ‚öΩ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –∏–≥—Ä—ã –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    ‚Ä¢ üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è - –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã –∏ –∏–≥—Ä—ã
    ‚Ä¢ üòå –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ - —Ä–µ–ª–∞–∫—Å –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ
    ‚Ä¢ üéµ –ú—É–∑—ã–∫–∞ - –∫–æ–Ω—Ü–µ—Ä—Ç—ã –∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    ‚Ä¢ ‚ú® –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ—Å—Ç—å - –æ—Å–æ–±–µ–Ω–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –º–µ—Å—Ç–∞
    ‚Ä¢ üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ - –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ

    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        """

    try:
        await callback.message.edit_text(text=wishes_text, reply_markup=get_wishes_keyboard(user_id))
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(chat_id=chat_id, text=wishes_text, reply_markup=get_wishes_keyboard(user_id))

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id)


@dp.callback_query(F.data == "confirm_wishes")
async def confirm_wishes(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    categories_count = len(user_data[user_id]["selected_categories"])
    wishes_count = len(user_data[user_id]["selected_wishes"])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–±–æ—Ä–∞
    processing_text = """
    ‚è≥ <b>–ò–¥—ë—Ç –ø–æ–¥–±–æ—Ä –º–µ—Å—Ç –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º...</b>

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ú—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç.
    """

    processing_message_id = await update_or_send_message(callback.message.chat.id, processing_text)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã (–≤–∫–ª—é—á–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é)
    user = await db_service.get_user(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    await db_service.save_user(
        user_id=user_id,
        categories=list(user_data[user_id]["selected_categories"]),
        wishes=list(user_data[user_id]["selected_wishes"]),
        filters=user["filters"] if user else [],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        latitude=user["latitude"] if user else None,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
        longitude=user["longitude"] if user else None,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é
    )

    await db_service.create_user_places_table(user_id)

    confirmation_text = f"""
    <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>

    <b>–í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:</b> {categories_count}
    <b>–í—ã–±—Ä–∞–Ω–æ –ø–æ–∂–µ–ª–∞–Ω–∏–π:</b> {wishes_count}
    <b>–í—ã–±—Ä–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä—ã:</b> {len(user["filters"]) if user else 0}

    –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ—Å—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –Ω–æ–≤—ã–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.
        """

    try:
        await callback.message.edit_text(
            text=confirmation_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìç –°–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–∞", callback_data="view_places_main")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                ]
            ),
        )
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if processing_message_id:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=processing_message_id)
            except Exception as e:
                logger.error(f"Error while deleting msg {e}")

        await update_or_send_message(
            chat_id=chat_id,
            text=confirmation_text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìç –°–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–∞", callback_data="view_places_main")],
                    [InlineKeyboardButton(text="‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                ]
            ),
        )

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "confirm_wishes")


@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery):
    photo = START_IMG_PATH
    main_text = """
    üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MySpot!</b>

    –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.

    <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
    ‚Ä¢ üìç –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç - —Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    ‚Ä¢ üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–¥—ã—Ö–∞
    ‚Ä¢ ‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–∏—Å–∫
    ‚Ä¢ üó∫Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è - –∏—â–∏—Ç–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º
    ‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - –ø–æ–ª—É—á–∏—Ç–µ —Å–ø—Ä–∞–≤–∫—É

    –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá
        """

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_or_send_message(chat_id=chat_id, text=main_text, reply_markup=get_main_keyboard(), photo_url=photo)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id

        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_or_send_message(chat_id=chat_id, text=main_text, reply_markup=get_main_keyboard(), photo_url=photo)

        # –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.delete_message(chat_id=chat_id, message_id=callback.message.message_id)
        except Exception as delete_error:
            logger.error(f"Error deleting old message: {delete_error}")

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id, "main_menu")


@dp.callback_query(F.data.in_(["place_prev", "place_next"]))
async def navigate_places(callback: types.CallbackQuery):
    logger.info("navigate")
    user_id = callback.from_user.id
    current_index = user_data[user_id].get("current_place_index", 0)
    places = user_data[user_id].get("places", [])

    if not places:
        await callback.answer("–ù–µ—Ç –º–µ—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞")
        return

    if callback.data == "place_prev":
        if current_index > 0:
            current_index -= 1
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ")
            return
    else:  # place_next
        if current_index < len(places) - 1:
            current_index += 1
        else:
            # –í—Å–µ –º–µ—Å—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ/–º–µ–Ω—é
            all_viewed_text = """
    üéâ <b>–í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!</b>

    –í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º.

    –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
    ‚Ä¢ üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    ‚Ä¢ ‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    ‚Ä¢ üó∫Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    """
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
                            callback_data="reset_viewed",
                        )
                    ],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="main_menu")],
                    [
                        InlineKeyboardButton(
                            text="üó∫Ô∏è –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                            callback_data="show_geolocation_main",
                        )
                    ],
                ]
            )
            try:
                await callback.message.edit_text(text=all_viewed_text, reply_markup=keyboard)
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                chat_id = callback.message.chat.id
                await update_or_send_message(chat_id=chat_id, text=all_viewed_text, reply_markup=keyboard)
            await callback.answer()
            return

    user_data[user_id]["current_place_index"] = current_index

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—Ç–æ
    await show_place(user_id, callback.message.chat.id, current_index)

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
@dp.callback_query(F.data == "show_filters_main", FilterStates.waiting_for_filter_name)
async def cancel_filter_search(callback: types.CallbackQuery, state: FSMContext):
    logger.info("-----------")
    user_id = callback.from_user.id
    user_filters = await db_service.get_user_filters(user_id)

    filters_text = """
    ‚öôÔ∏è <b>–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</b>

    –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å. 
    –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

    <b>–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>
    """

    if user_filters:
        for filter_name in user_filters:
            filters_text += f"‚Ä¢ {filter_name}\n"
    else:
        filters_text += "‚ùå –§–∏–ª—å—Ç—Ä—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n"

    filters_text += "\n–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'"

    try:
        await callback.message.edit_text(text=filters_text, reply_markup=await get_filters_keyboard(user_id, 0))
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        chat_id = callback.message.chat.id
        await update_or_send_message(
            chat_id=chat_id,
            text=filters_text,
            reply_markup=await get_filters_keyboard(user_id, 0),
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await callback.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(callback.from_user.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—É–¥–∞–ª–µ–Ω–∏–µ)
@dp.message()
async def delete_all_messages(message: types.Message):
    await delete_user_message(message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await db_service.update_user_activity(message.from_user.id)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logging.basicConfig(level=logging.INFO)
        await db_service.init_db(
            Settings.POSTGRES_USER,
            Settings.POSTGRES_PASSWORD,
            Settings.POSTGRES_DB,
            Settings.POSTGRES_HOST,
            Settings.POSTGRES_PORT,
        )
        await db_service.create_tables()
        scheduler = AsyncIOScheduler(timezone=pytz.timezone("Europe/Moscow"))
        scheduler.add_job(db_service.reset_viewed_by_timer, CronTrigger(hour=4, minute=0))
        scheduler.add_job(daily_report(by_timer=True), CronTrigger(hour=0, minute=0))
        scheduler.start()
        logger.info("Starting single-message bot with database support...")
        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á:, {scheduler.get_jobs()}")
        await dp.start_polling(bot)
    finally:
        await db_service.close_db()


if __name__ == "__main__":
    asyncio.run(main())
